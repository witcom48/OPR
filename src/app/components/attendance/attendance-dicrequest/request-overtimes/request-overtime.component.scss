table td{
    padding:5px
}

.table_summary_{
    border-collapse: collapse;
}

.table_summary_ td{
    padding: 5px;
    border: 0px solid #ccc;
}


.main_div {
    text-align:left;
    position: relative;
    padding: 5px;
    height: 70px;
    width: 120px;
    background-color: #152047;
}
.sub_div {
    position: absolute;
    bottom: 5px;
}

.spn_value{
    color: #FFFFFF;
    font-size: 16px;
}

.spn_title{
    color: #FFFFFF;
    font-size: 12px;    
}



.time_real{
    background-color: black;
    color: #FFFFFF;
    width: 80px;
}

:host .input-mask{
    width:100px;
    text-align:center;
    }
    

.timeinput{
    font-size: 17px;
    // background-color: black;
    // color: #FFFFFF;
    text-align: center;
    width: 100%;
}

.timecard_edit{
    color: red;
}

.timecard_edit_{
    background-color: red;
}

.normal{
    background-color: 	#FFFFFF;
}

.daytype_O{
    background-color: 	#D8BFD8;
}

.daytype_C{
    background-color: #C0FFC0;
}

.daytype_H{
    background-color: 	#ADD8E6;
}

.daytype_A{
    background-color: #FFFFC0;
}

.daytype_L{
    background-color: #E0E0E0;
}

.p-dialog-contents::ng-deep {
    overflow-y: hidden;
    padding: -1px 0.5rem 4rem 0.5rem;
    
  }
  .hovered {
    background-color: #f34646 !important;
  }
  .gray-button {
    background-color: #73737333;
     border: 1px solid #ccc;
    display: inline-block;
    padding: 6px 12px;
    cursor: pointer;
  }
// html
// <!-- <span style="font-size: 20px;">Attendance</span>&nbsp; <i class="pi pi-angle-right"></i>&nbsp; <small>View Time</small> -->
// <p-breadcrumb class="max-w-full" [model]="itemslike" [home]="home"></p-breadcrumb>

// <hr>
// <p-toast position="top-right"></p-toast>

// <p-confirmDialog [style]="{width: '50vw'}" [baseZIndex]="10000" rejectButtonStyleClass="p-button-text"
//     key="myDialog"></p-confirmDialog>

// <p-dialog [(visible)]="searchEmp" [style]="{width: '40vw'}" [position]="position">
//     <div class="grid">
//         <div class="col-12">
//             <app-search-emp></app-search-emp>
//         </div>
//         <div class="col-12">
//             <p-button label="{{title_btn_select[initial_current.Language]}}" icon="pi pi-check"
//                 (click)="select_emp()"></p-button>
//             &nbsp;
//             <button pButton pRipple type="button" label="{{title_btn_close[initial_current.Language]}}"
//                 class="p-button-secondary" (click)="close_searchemp()"></button>
//         </div>
//     </div>
// </p-dialog>
// <!-- สวัสดี -->

// <p-dialog header="เพิ่ม" [(visible)]="displayManage" [style]="{width: '50vw'}"
//     [position]="position" (onHide)="closeManage()">
//     <!-- <div class="formgrid grid align-items-end"> -->


// <!-- <p-dialog header="เพิ่ม" [(visible)]="displayManage" [style]="{width: '50vw'}" [position]="position"> -->
//     <!-- <div class="col-6">
//         <table style="width: 100%; ">
//             <tr>

//                 <td style="width: 150px;">
//                     <input id="worker_code" type="text" value="{{worker_code}}" style="text-align: center; "
//                         class="text-base text-color surface-overlay p-2 border-1 border-solid surface-border border-round appearance-none outline-none focus:border-primary w-full"
//                         readonly>
//                 </td>
//                 <td style="width: 250px;" align="left">
//                     <input id="worker_name" type="text" value="{{worker_name}}" style="width: 250px;"
//                         class="text-base text-color surface-overlay p-2 border-1 border-solid surface-border border-round appearance-none outline-none focus:border-primary w-full"
//                         readonly>
//                 </td>
//             </tr>
//         </table>
//     </div>
//     <hr> -->


//     <div class="formgrid grid align-items-end " >
//         <div class="field col-12"  >
//             <b><label>เลขที่เอกสาร</label></b>
//             <br>
//             <textarea [(ngModel)]="selectedtrATTtimeot.timeot_note" pInputTextarea [autoResize]="true"></textarea>
//         </div>

        
    
//         <!--  -->
//         <div class="field col-12 md:col-6" >
//             <label for="ppos_shift_code">วันที่</label>

//             <p-calendar [(ngModel)]="selectedtrATTtimeot.timeot_workdate" dateFormat="dd/mm/yy" inputId="date_from"
//                 [disabled]="edit_data"></p-calendar>
//             <!-- -
//             <p-calendar [(ngModel)]="date_to" dateFormat="dd/mm/yy" inputId="date_to"></p-calendar> -->
//         </div>

//         <div class="field col-12 md:col-6"  >
//             <label for="ppos_shift_code">ถึงวันที่</label>

//             <p-calendar [(ngModel)]="selectedtrATTtimeot.timeot_workdate" dateFormat="dd/mm/yy" inputId="date_from"
//                 [disabled]="edit_data"></p-calendar>
//             <!-- -
//             <p-calendar [(ngModel)]="date_to" dateFormat="dd/mm/yy" inputId="date_to"></p-calendar> -->
//         </div>

//         <div class="reqtimeot field formgrid grid align-items-end">
//             <div class="field col-12 md:col-3">
//                 <p>ก่อนเข้างาน</p>
//                 <p-inputMask mask="99:99" [(ngModel)]="selectedtrATTtimeot.timeot_beforemin_hrs"
//                     placeholder="HH:mm"></p-inputMask>
//             </div>
//             <div class="field col-12 md:col-3">
//                 <p>เวลาปกติ</p>
//                 <p-inputMask mask="99:99" [(ngModel)]="selectedtrATTtimeot.timeot_normalmin_hrs"
//                     placeholder="HH:mm"></p-inputMask>
//             </div>
//             <div class="field col-12 md:col-3">
//                 <p>เวลาพักเบรก</p>
//                 <p-inputMask mask="99:99" [(ngModel)]="selectedtrATTtimeot.timeot_break_hrs"
//                     placeholder="HH:mm"></p-inputMask>
//             </div>
//             <div class="field col-12 md:col-3">
//                 <p>หลังเลิกงาน</p>
//                 <p-inputMask mask="99:99" [(ngModel)]="selectedtrATTtimeot.timeot_aftermin_hrs"
//                     placeholder="HH:mm"></p-inputMask>
//             </div>
//         </div>
//         <!-- <div class="field col-12 md:col-3"> </div> -->

//         <div class="field col-12 md:col-6">
//             <label for="ppos_shift_code">เหตุผลการทำล่วงเวลา</label>
//             <p-dropdown class="selectyaer" [options]="reason_list" [(ngModel)]="reasonselected"
//                 (onChange)="selectotreason()" optionLabel={{reasonedis}}></p-dropdown>
//             <!-- <label for="ppos_shift_code">เหตุผลการทำล่วงเวลา</label>
//             <p-dropdown placeholder="REA001 : อื่นๆ" optionLabel="name" [showClear]="true"
//                 [style]="{ width: '100%', overflow: 'visible' }"></p-dropdown> -->

//         </div>
//         <div class="field col-12 md:col-6">
//             <label for="ppos_shift_code">สถานที่</label>
//             <p-dropdown class="selectyaer" [options]="location_list" [(ngModel)]="locationselected"
//                 (onChange)="selectotlocation()" optionLabel={{locatiodis}}></p-dropdown>
//             <!-- <label for="ppos_shift_code">เหตุผลการทำล่วงเวลา</label>
//             <p-dropdown placeholder="REA001 : อื่นๆ" optionLabel="name" [showClear]="true"
//                 [style]="{ width: '100%', overflow: 'visible' }"></p-dropdown> -->

//         </div>

//         <div class="field col-12" style="display:flex;flex-direction: column;">
//             <label for="project_name_th">เพิ่มเติม</label>
//             <textarea [(ngModel)]="selectedtrATTtimeot.timeot_note" pInputTextarea [autoResize]="true"></textarea>
//             <!-- <label for="project_name_th">เพิ่มเติม</label>
//             <input id="project_name_th" type="text"
//                 class="text-base text-color surface-overlay p-2 border-1 border-solid surface-border border-round appearance-none outline-none focus:border-primary w-full"> -->
//         </div>
//         <!--  -->


//         <div class="field col-12">
//             <p-button label="{{title_save[initial_current.Language]}}" icon="pi pi-save"
//                 [disabled]="hasTruePeriodCloseta" (click)="timecard_summit()"></p-button>
//             &nbsp;
//             <button pButton pRipple type="button" label="{{title_close[initial_current.Language]}}"
//                 class="p-button-secondary" (click)="timecard_cancel()"></button>
//         </div>

//     </div>

// </p-dialog>

// <div class="grid">
//     <div class="col-6">
//         <table style="width: 100%; ">
//             <tr>
//                 <td style="width: 20px;">
//                     <i class="pi pi-angle-left" style="font-size: 2rem" (click)="doBackWorker()"></i>
//                 </td>
//                 <td style="width: 150px;">
//                     <input id="worker_code" type="text" value="{{worker_code}}" style="text-align: center; "
//                         class="text-base text-color surface-overlay p-2 border-1 border-solid surface-border border-round appearance-none outline-none focus:border-primary w-full"
//                         readonly>
//                 </td>
//                 <td style="width: 20px;">
//                     <i class="pi pi-angle-right" style="font-size: 2rem" (click)="doNextWorker()"></i>
//                 </td>
//                 <td style="width: 20px;">
//                     <i class="pi pi-search" (click)="open_searchemp()"></i>
//                 </td>
//                 <td style="width: 250px;" align="left">
//                     <input id="worker_name" type="text" value="{{worker_name}}" style="width: 250px;"
//                         class="text-base text-color surface-overlay p-2 border-1 border-solid surface-border border-round appearance-none outline-none focus:border-primary w-full"
//                         readonly>
//                 </td>
//             </tr>
//         </table>
//     </div>
//     <div class="col-6">
//         &nbsp;
//     </div>

//     <div class="col-12">
//         <p-menubar [model]="menu_timecard"></p-menubar>
//         <p-table #dtTime [value]="timecard_list" styleClass="p-datatable-sm" [scrollable]="true" scrollHeight="700px"
//             [virtualScroll]="true" selectionMode="single" [(selection)]="selectedtrATTtimeot"
//             (onRowSelect)="onRowSelectTimecard($event)" dataKey="index" [rows]="50" [showCurrentPageReport]="true"
//             [rowsPerPageOptions]="[50,100,150]" [paginator]="true"
//             currentPageReportTemplate="{{title_page_from[initial_current.Language]}} {first} {{title_page_to[initial_current.Language]}} {last} {{title_page_total[initial_current.Language]}} {totalRecords} {{title_page_record[initial_current.Language]}} "
//             [globalFilterFields]="['shift_code','timecard_daytype', 'modified_by']">
//             <ng-template pTemplate="header">
//                 <tr>
//                     <th>ลำดับ</th>
//                     <th>วันที่</th>
//                     <th>ก่อนเข้างาน</th>
//                     <th style="width: 100px;">เวลาปกติ</th>
//                     <th style="width: 100px;">เวลาพัก</th>
//                     <th>หลังเลิกงาน</th>
//                     <th style="width: 200px;">{{title_modified_by[initial_current.Language]}}</th>
//                     <th>{{title_modified_date[initial_current.Language]}}</th>
//                 </tr>

//             </ng-template>

//             <ng-template pTemplate="body" let-timecard>
//                 <tr [pSelectableRow]="timecard">

//                     <td [ngClass]="getClass(timecard.timecard_color, timecard.timecard_daytype)">
//                         {{doConvertHHMM(timecard.timecard_work1_min_app)}}</td>
//                     <td [ngClass]="getClass(timecard.timecard_color, timecard.timecard_daytype)">
//                         {{doConvertHHMM(timecard.timecard_after_min)}}</td>
//                     <td [ngClass]="getClass(timecard.timecard_color, timecard.timecard_daytype)">
//                         {{doConvertHHMM(timecard.timecard_after_min_app)}}</td>
//                     <td [ngClass]="getClass(timecard.timecard_color, timecard.timecard_daytype)">
//                         {{doConvertHHMM(timecard.timecard_late_min)}}</td>
//                     <td [ngClass]="getClass(timecard.timecard_color, timecard.timecard_daytype)">
//                         {{doConvertHHMM(timecard.timecard_late_min_app)}}</td>
//                     <td [ngClass]="getClass(timecard.timecard_color, timecard.timecard_daytype)">
//                         {{doConvertHHMM((timecard.timecard_leavepay_min + timecard.timecard_leavededuct_min))}}</td>
//                     <td [ngClass]="getClass(timecard.timecard_color, timecard.timecard_daytype)">
//                         {{timecard.modified_by}}</td>
//                     <td [ngClass]="getClass(timecard.timecard_color, timecard.timecard_daytype)">
//                         {{timecard.modified_date | date:'dd/MM/yyyy HH:mm'}}</td>
//                 </tr>
//             </ng-template>
//         </p-table>
//     </div>

    


// </div>



// ts

// import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';
// import { MenuItem } from 'primeng/api';
// import { ConfirmationService, MessageService } from 'primeng/api';

// import { ActivatedRoute } from '@angular/router';
// import { Router } from '@angular/router';

// import { AppConfig } from '../../../../config/config';
// import { InitialCurrent } from '../../../../config/initial_current';

// import { EmployeeModel } from '../../../../models/employee/employee';
// import { EmployeeService } from 'src/app/services/emp/worker.service';

// import { TimecardService } from 'src/app/services/attendance/timecards.service';

// import { DaytypeModels } from 'src/app/models/attendance/daytype';

// import { ShiftModels } from 'src/app/models/attendance/shift';
// import { ShiftServices } from 'src/app/services/attendance/shift.service';

// import { SearchEmpComponent } from '../../../usercontrol/search-emp/search-emp.component';

// import { ProjectModel } from '../../../../models/project/project';
// import { ProjectService } from '../../../../services/project/project.service';

// import { ProjobmainModel } from '../../../../models/project/project_jobmain';
// import { ProjectDetailService } from '../../../../services/project/project_detail.service';






// import { DocApproveServices } from 'src/app/services/attendance/docapprove.service';
// import { PeriodsServices } from 'src/app/services/payroll/periods.service';
// import { FillterEmpModel } from 'src/app/models/usercontrol/filteremp';
// import { TRATTTimeotModel } from 'src/app/models/attendance/TRATTTimeotModel';
// import { AccountModel } from 'src/app/models/self/account';
// import { TRAccountModel } from 'src/app/models/self/traccount';
// import { TimeotServices } from 'src/app/services/self/timeot.service';
// import { ReasonsService } from 'src/app/services/system/policy/reasons.service';
// import { LocationService } from 'src/app/services/system/policy/location.service';
// import { AccountServices } from 'src/app/services/self/account.service';
// import { ReasonsModel } from 'src/app/models/system/policy/reasons';
// import { SysLocationModel } from 'src/app/models/system/policy/location';
// import { cls_MTReqdocumentModel } from 'src/app/models/self/cls_MTReqdocument';
// import { DatePipe } from '@angular/common';

// @Component({
//   selector: 'app-request-overtime',
//   templateUrl: './request-overtime.component.html',
//   styleUrls: ['./request-overtime.component.scss']
// })
// export class RequestOvertimeComponent implements OnInit {
//   itemslike: MenuItem[] = [];
//   home: any;

//   reasonedis: string = "reason_name_en"
//   locatiodis: string = "location_name_en"
//   namedis: string = "worker_detail_en"

//   items: MenuItem[] = [];
//   items_attfile: MenuItem[] = [];
//   @ViewChild(SearchEmpComponent) selectEmp: any;

//   title_page: { [key: string]: string } = { EN: "Time Information", TH: "ข้อมูลเวลา" }
//   title_new: { [key: string]: string } = { EN: "New", TH: "เพิ่ม" }
//   title_edit: { [key: string]: string } = { EN: "Edit", TH: "แก้ไข เพิ่ม" }
//   title_delete: { [key: string]: string } = { EN: "Delete", TH: "ลบ" }
//   title_btn_save: { [key: string]: string } = { EN: "Save", TH: "บันทึก" }
//   title_btn_cancel: { [key: string]: string } = { EN: "Cancel", TH: "ยกเลิก" }
//   title_btn_close: { [key: string]: string } = { EN: "Close", TH: "ปิด" }
//   title_btn_select: { [key: string]: string } = { EN: "Select", TH: "เลือก" }
//   title_modified_by: { [key: string]: string } = { EN: "Edit by", TH: "ผู้ทำรายการ" }
//   title_modified_date: { [key: string]: string } = { EN: "Edit date", TH: "วันที่ทำรายการ" }
//   title_search: { [key: string]: string } = { EN: "Search", TH: "ค้นหา" }

//   //
//   title_confirm: { [key: string]: string } = { EN: "Are you sure?", TH: "ยืนยันการทำรายการ" }
//   title_confirm_record: { [key: string]: string } = { EN: "Confirm to record", TH: "คุณต้องการบันทึกการทำรายการ" }
//   title_confirm_delete: { [key: string]: string } = { EN: "Confirm to delete", TH: "คุณต้องการลบรายการ" }
//   title_confirm_yes: { [key: string]: string } = { EN: "Yes", TH: "ใช่" }
//   title_confirm_no: { [key: string]: string } = { EN: "No", TH: "ยกเลิก" }
//   title_confirm_cancel: { [key: string]: string } = { EN: "You have cancelled", TH: "คุณยกเลิกการทำรายการ" }
//   //
//   title_page_from: { [key: string]: string } = { EN: "Showing", TH: "แสดง" }
//   title_page_to: { [key: string]: string } = { EN: "to", TH: "ถึง" }
//   title_page_total: { [key: string]: string } = { EN: "of", TH: "จาก" }
//   title_page_record: { [key: string]: string } = { EN: "entries", TH: "รายการ" }

//   //
//   title_import: { [key: string]: string } = { EN: "Import", TH: "นำเข้า" }
//   title_export: { [key: string]: string } = { EN: "Export", TH: "โอนออก" }
//   title_save: { [key: string]: string } = { EN: "Save", TH: "บันทึก" }
//   title_close: { [key: string]: string } = { EN: "Close", TH: "ปิด" }
//   title_cancel: { [key: string]: string } = { EN: "Cancel", TH: "ยกเลิก" }
//   title_more: { [key: string]: string } = { EN: "More", TH: "เพิ่มเติม" }
//   title_code: { [key: string]: string } = { EN: "Code", TH: "รหัส" }
//   title_name_th: { [key: string]: string } = { EN: "Name (Thai)", TH: "ชื่อไทย" }
//   title_name_en: { [key: string]: string } = { EN: "Name (Eng.)", TH: "ชื่ออังกฤษ" }


//   title_date: { [key: string]: string } = { EN: "Date", TH: "วันที่" }
//   title_project: { [key: string]: string } = { EN: "Project", TH: "โครงการ" }
//   title_job: { [key: string]: string } = { EN: "Job", TH: "งาน" }
//   title_shift: { [key: string]: string } = { EN: "Shift", TH: "กะการทำงาน" }
//   title_daytype: { [key: string]: string } = { EN: "Daytype", TH: "ประเภทวัน" }
//   title_normalin: { [key: string]: string } = { EN: "IN", TH: "เวลาเข้า" }
//   title_normalout: { [key: string]: string } = { EN: "OUT", TH: "เวลาออก" }

//   title_in: { [key: string]: string } = { EN: "In", TH: "เข้างาน" }
//   title_out: { [key: string]: string } = { EN: "Out", TH: "ออกงาน" }
//   title_work: { [key: string]: string } = { EN: "Work", TH: "เวลาทำงาน" }

//   title_break: { [key: string]: string } = { EN: "Break", TH: "พักเบรค" }

//   title_beforeot: { [key: string]: string } = { EN: "OT In.", TH: "โอทีก่อนเข้างาน" }
//   title_afterot: { [key: string]: string } = { EN: "OT Out.", TH: "โอทีหลังเลิกงาน" }
//   title_late: { [key: string]: string } = { EN: "Late", TH: "สาย" }
//   title_leave: { [key: string]: string } = { EN: "Leave", TH: "ลางาน" }
//   title_approve: { [key: string]: string } = { EN: "Approve", TH: "อนุมัติ" }

//   title_lock: { [key: string]: string } = { EN: "Lock", TH: "ล็อค" }
//   title_deduct: { [key: string]: string } = { EN: "Deduct", TH: "หักเงิน" }
//   title_document: { [key: string]: string } = { EN: "Document", TH: "เอกสาร" }


//   title_docno: { [key: string]: string } = { EN: "Doc.", TH: "เลขที่" }
//   title_doctype: { [key: string]: string } = { EN: "Type", TH: "ประเภท" }
//   title_fromdate: { [key: string]: string } = { EN: "From", TH: "จากวันที่" }
//   title_todate: { [key: string]: string } = { EN: "To", TH: "ถึงวันที่" }
//   title_detail: { [key: string]: string } = { EN: "Detail", TH: "รายละเอียด" }

//   style_input_real: string = "[style]=\"{'width':'80px'}\\";


//   menu_timecard: MenuItem[] = [];

//   constructor(private employeeService: EmployeeService,
//     private timecardService: TimecardService,
//     private router: Router,
//     private datePipe: DatePipe,
//     private messageService: MessageService,
//     private confirmationService: ConfirmationService,
//     private shiftServices: ShiftServices,
//     private projectService: ProjectService,
//     private projectDetailService: ProjectDetailService,
//     private periodsService: PeriodsServices,
//     private timeotService: TimeotServices,
//     private reasonService: ReasonsService,
//     private locationService: LocationService,
//     private accountServie: AccountServices,
//     private docApproveServices: DocApproveServices

//   ) { }
//   selectedFromDate: Date = new Date()
//   selectedToDate: Date = new Date()
//   ngOnInit(): void {

//     this.doGetInitialCurrent()
//     this.doLoadMenu()
//     this.doLoadLanguage()

//     this.doLoadProject()
//     this.doLoadProjobmain()
//     this.Periodclosed()
//     setTimeout(() => {
//       this.doLoadEmployee()
//       this.doLoadPolDaytype()
//       this.doLoadPolShift()
//     }, 300);

//     this.selectedFromDate = new Date(this.initial_current.TA_FromDate)
//     this.selectedToDate = new Date(this.initial_current.TA_ToDate)

//   }

//   public initial_current: InitialCurrent = new InitialCurrent();
//   doGetInitialCurrent() {
//     this.initial_current = JSON.parse(localStorage.getItem(AppConfig.SESSIONInitial) || '{}');
//     if (!this.initial_current) {
//       this.router.navigateByUrl('login');
//     }
//     this.itemslike = [{ label: this.title_page[this.initial_current.Language], styleClass: 'activelike' },];
//     this.home = { icon: 'pi pi-home', routerLink: '/' };
//   }

//   doLoadLanguage() {
//     if (this.initial_current.Language == "TH") {


//     }
//   }

//   doLoadMenu() {
//     this.menu_timecard = [
//       {
//         label: this.title_edit[this.initial_current.Language],
//         icon: 'pi pi-fw pi-file-edit',
//         command: (event) => {
//           this.showManage()
//         }
//       },
//       {
//         label: 'new',
//         icon: 'pi pi-fw pi-plus',
//         command: (event) => {
//           this.account_list_source = [];
//           this.account_list_dest = [];
//           this.selectedtrtimeot = new TRATTTimeotModel();
//           this.reasonselected = this.reason_list[0]
//           this.locationselected = this.location_list[0]
//           this.selectedtrtimeot.reason_code = this.reason_list[0].reason_code
//           this.selectedtrtimeot.location_code = this.location_list[0].location_code
//           if (this.initial_current.Usertype == "GRP") {
//             this.account_list.forEach((obj: TRAccountModel) => {
//               this.account_list_source.push(obj)
//             })
//           }
//           this.showManage()
//         }

//       },


       

//     ];
//   }
//   reason_list: ReasonsModel[] = [];
//   reasonselected: ReasonsModel = new ReasonsModel();
//   location_list: SysLocationModel[] = [];
//   locationselected: SysLocationModel = new SysLocationModel();
//   trtimeot_list: TRATTTimeotModel[] = [];
//   selectedtrtimeot: TRATTTimeotModel = new TRATTTimeotModel();
//   selectedreqdoc: cls_MTReqdocumentModel = new cls_MTReqdocumentModel();
//   account_list: TRAccountModel[] = [];
//   account_list_source: TRAccountModel[] = [];
//   account_list_dest: TRAccountModel[] = [];
//   selectedAccount: TRAccountModel = new TRAccountModel();
//   start_date: Date = new Date();
//   end_date: Date = new Date();


//   Search() {
//     this.doLoadTimeot();
//   }
//   doLoadAccount() {
//     var tmp = new AccountModel();
//     tmp.account_user = this.initial_current.Username;
//     tmp.account_type = this.initial_current.Usertype;
//     this.accountServie.account_get(tmp).then(async (res) => {
//       res[0].worker_data.forEach((obj: TRAccountModel) => {
//         obj.worker_detail_en = obj.worker_code + " : " + obj.worker_detail_en;
//         obj.worker_detail_th = obj.worker_code + " : " + obj.worker_detail_th;
//       });
//       this.account_list = await res[0].worker_data;
//       this.selectedAccount = res[0].worker_data[0];
//       this.doLoadTimeot();
//     });
//   }

//   doLoadReason() {
//     this.reason_list = [];
//     let data = new ReasonsModel()
//     data.reason_group = "OT"
//     this.reasonService.reason_get(data).then(async (res) => {
//       this.reason_list = await res;
//     });
//   }
//   doLoadLocation() {
//     this.location_list = [];
//     let data = new SysLocationModel()
//     this.locationService.location_get(data).then(async (res) => {
//       this.location_list = await res;
//     });
//   }
//   // 

//   workerDetail: EmployeeModel = new EmployeeModel();
//   worker_list: EmployeeModel[] = [];
//   worker_index: number = 0;
//   worker_code: string = "";
//   worker_name: string = "";
//   fillterIncludeResign: boolean = false;

//   doLoadEmployee() {
//     var fillter: FillterEmpModel = new FillterEmpModel;

//     fillter.worker_resignstatus = this.fillterIncludeResign;
//     if (this.fillterSearchemp) {
//       fillter.searchemp = this.selectedSearchemp;
//     } else {
//       fillter.searchemp = "";
//     }
//     this.employeeService.worker_getbyfillter(fillter).then(async (res) => {
//       this.worker_list = res;
//       setTimeout(() => {

//         this.worker_index = 0;
//         this.doSetDetailWorker();

//       }, 500);
//     });
//   }
//   //-- Emp master
//   selectedSearchemp: string = "";
//   fillterSearchemp: boolean = false;
//   doChangeSearchemp(event: any) {
//     if (this.fillterSearchemp) {
//       this.doLoadEmployee();
//       this.doSetDetailWorker();
//     }
//   }
//   // doLoadEmployee() {
//   //   this.employeeService.worker_get(this.initial_current.CompCode, "").then(async (res) => {
//   //     this.worker_list = await res;

//   //     setTimeout(() => {

//   //       this.worker_index = 0;
//   //       this.doSetDetailWorker();

//   //     }, 500);

//   //   });
//   // }
//   doChaneDate() {
//     if (this.selectedFromDate > this.selectedToDate) {
//       this.selectedToDate = new Date(this.selectedFromDate)
//     }
//   }
//   doNextWorker() {
//     if (this.worker_index < this.worker_list.length - 1) {
//       this.worker_index++;
//       this.doSetDetailWorker();
//     }
//   }

//   doBackWorker() {
//     if (this.worker_index > 0) {
//       this.worker_index--;
//       this.doSetDetailWorker();
//     }
//   }

//   doSetDetailWorker() {
//     this.workerDetail = this.worker_list[this.worker_index];
//     this.worker_code = this.workerDetail.worker_code;
//     if (this.initial_current.Language === 'EN') {
//       this.worker_name =
//         this.workerDetail.worker_fname_en + ' ' + this.workerDetail.worker_lname_en;
//     } else {
//       this.worker_name =
//         this.workerDetail.worker_fname_th + ' ' + this.workerDetail.worker_lname_th;
//     }

//     setTimeout(() => {
//       this.doLoadTimecard();
//     }, 200);
//   }

//   timecard_list: TRATTTimeotModel[] = [];
//   selectedtrATTtimeot: TRATTTimeotModel = new TRATTTimeotModel();
//   edit_timecard: boolean = false;
//   doLoadTimecard() {

//     this.timecardService.timecard_get(this.initial_current.CompCode, "", this.worker_code, this.initial_current.TA_FromDate, this.initial_current.TA_ToDate).then((res) => {
//       this.timecard_list = res;
//     });
//   }

//   date_work = new Date();
//   date_ch1 = new Date();
//   date_ch2 = new Date();
//   date_ch3 = new Date();
//   date_ch4 = new Date();
//   date_ch5 = new Date();
//   date_ch6 = new Date();
//   date_ch7 = new Date();
//   date_ch8 = new Date();
//   date_ch9 = new Date();
//   date_ch10 = new Date();

//   before: string = "00:00";
//   before_app: string = "00:00";
//   work1: string = "00:00";
//   work1_app: string = "00:00";
//   work2: string = "00:00";
//   work2_app: string = "00:00";
//   break: string = "00:00";
//   break_app: string = "00:00";
//   after: string = "00:00";
//   after_app: string = "00:00";

//   late: string = "00:00";
//   late_app: string = "00:00";

//   leave: string = "00:00";
//   leave_app: string = "00:00";

//   onRowSelectTimecard(event: Event) {
//     this.displayManage = false
//   }

//   onRowSelectDocreq(event: Event) {

//   }


//   onRowSelect(event: Event) {
//     this.location_list.forEach((obj: SysLocationModel) => {
//       if (obj.location_code == this.selectedtrtimeot.location_code) {
//         this.locationselected = obj;
//       }
//     })
//     this.reason_list.forEach((obj: ReasonsModel) => {
//       if (obj.reason_code == this.selectedtrtimeot.reason_code) {
//         this.reasonselected = obj;
//       }
//     })
//     this.edit_data = true;
//     this.displayManage = true
//   }

//    edit_data: boolean = false;
//    // manage_title: string = "Manage"
//   displayManage: boolean = false;
//   position: string = "right";
//   manage_title: string = "ข้อมูลเวลา"
//   showManage() {
//     this.displayManage = true;
//     this.edit_data = false;

//     // setTimeout(() => {
//     //   this.doLoadValue()
//     // }, 200);

//   }


//   // showManage() {
//   //   this.displayManage = true
//   //   this.edit_data = false;

//   // }
//   selectotlocation() {
//     this.selectedtrtimeot.location_code = this.locationselected.location_code;
//   }
//   selectotreason() {
//     this.selectedtrtimeot.reason_code = this.reasonselected.reason_code;
//   }


//   onChangeWork1() {
//     // console.log(this.work1)
//   }

//   pad(num: number, size: number): string {
//     let s = num + "";
//     while (s.length < size) s = "0" + s;
//     return s;
//   }

//   doConvertHHMM(time_min: number): string {
//     var hrs = Math.floor(time_min / 60);
//     var min = time_min - (hrs * 60);
//     return this.pad(hrs, 2) + ":" + this.pad(min, 2);
//   }

//   getMin(time: string) {
//     if (time) {
//       var date1 = new Date(0, 0, 0, Number(time.split(":")[0]), Number(time.split(":")[1]), 0)
//       var hours_minutes = date1.getHours() * 60 + date1.getMinutes();
//       return hours_minutes;
//     } else {
//       return 0
//     }
//   }
//   isConfirmationDialogVisible: boolean = false;
//   timecard_summit() {
//     if (!this.hasTruePeriodCloseta) {
//       this.isConfirmationDialogVisible = true;
//       this.confirmationService.confirm({
//         message: this.title_confirm_record[this.initial_current.Language],
//         header: this.title_confirm[this.initial_current.Language],
//         icon: 'pi pi-exclamation-triangle',

//         accept: () => {
//           this.selectedtrtimeot.timeot_beforemin = this.getMin(this.selectedtrtimeot.timeot_beforemin_hrs)
//           this.selectedtrtimeot.timeot_normalmin = this.getMin(this.selectedtrtimeot.timeot_normalmin_hrs)
//           this.selectedtrtimeot.timeot_breakmin = this.getMin(this.selectedtrtimeot.timeot_break_hrs)
//           this.selectedtrtimeot.timeot_aftermin = this.getMin(this.selectedtrtimeot.timeot_aftermin_hrs)
//           if (this.initial_current.Usertype == "GRP" && !this.edit_data) {
//             let data_doc: TRATTTimeotModel[] = []
//             this.account_list_dest.forEach((obj: TRAccountModel, index) => {
//               var tmp: TRATTTimeotModel = new TRATTTimeotModel();
//               tmp.timeot_id = this.selectedtrtimeot.timeot_id;
//               tmp.timeot_doc = "OT_" + (Number(this.datePipe.transform(new Date(), 'yyyyMMddHHmmss')) + index);
//               tmp.timeot_workdate = this.selectedtrtimeot.timeot_workdate;
//               tmp.timeot_todate = this.selectedtrtimeot.timeot_todate;
//               tmp.timeot_beforemin = this.selectedtrtimeot.timeot_beforemin;
//               tmp.timeot_normalmin = this.selectedtrtimeot.timeot_normalmin;
//               tmp.timeot_breakmin = this.selectedtrtimeot.timeot_breakmin;
//               tmp.timeot_aftermin = this.selectedtrtimeot.timeot_aftermin;
//               tmp.reason_code = this.selectedtrtimeot.reason_code;
//               tmp.location_code = this.selectedtrtimeot.location_code;
//               tmp.timeot_note = this.selectedtrtimeot.timeot_note;
//               tmp.worker_code = obj.worker_code;
//               tmp.company_code = obj.company_code;
//               tmp.reqdoc_data = this.selectedtrtimeot.reqdoc_data;
//               data_doc.push(tmp);
//             })
//             this.doRecordTimeot(data_doc);
//           } else {
//             if (this.selectedtrtimeot.timeot_doc === "") {
//               this.selectedtrtimeot.timeot_doc = "OT_" + this.datePipe.transform(new Date(), 'yyyyMMddHHmmss');
//             }
//             // // console.log(this.selectedtrtimeot)
//             this.doRecordTimeot([this.selectedtrtimeot])
//           }
//         },
//         reject: () => {
//         }
//       })
//     }
//   }

//   timecard_cancel() {
//     this.displayManage = false
//   }


//   async doRecordTimeot(data: TRATTTimeotModel[]) {
//     await this.timeotService.timeot_record(data).then((res) => {
//       if (res.success) {
//         this.messageService.add({ severity: 'success', summary: 'Success', detail: res.message });
//         this.doLoadTimeot();
//       }
//       else {
//         this.messageService.add({ severity: 'error', summary: 'Error', detail: res.message });
//       }

//     });
//     this.closeManage()
//   }
//   async doDeleteTimeot(data: TRATTTimeotModel) {
//     await this.timeotService.timeot_delete(data).then((res) => {
//       if (res.success) {
//         this.messageService.add({ severity: 'success', summary: 'Success', detail: res.message });
//         this.doLoadTimeot();
//       }
//       else {
//         this.messageService.add({ severity: 'error', summary: 'Error', detail: res.message });
//       }

//     });
//     this.closeManage()
//   }

//   closeManage() {
//     this.selectedtrtimeot = new TRATTTimeotModel();
//     this.displayManage = false

//   }


//   daytype_list: any[] = [];

//   doLoadPolDaytype() {

//     this.daytype_list = []

//     this.timecardService.daytype_get().then(async (res) => {
//       await res.forEach((element: DaytypeModels) => {

//         this.daytype_list.push(
//           {
//             name: this.initial_current.Language == "EN" ? element.daytype_name_en : element.daytype_name_th,
//             code: element.daytype_code
//           }
//         )

//       });
//     });

//   }

//   shift_list: any[] = [];

//   doLoadPolShift() {
//     var tmp = new ShiftModels();
//     this.shift_list = []

//     this.shiftServices.shift_get(tmp).then(async (res) => {
//       await res.forEach((element: ShiftModels) => {

//         this.shift_list.push(
//           {
//             name: this.initial_current.Language == "EN" ? element.shift_name_en : element.shift_name_th,
//             code: element.shift_code
//           }
//         )

//       });
//     });
//   }



//   searchEmp: boolean = false;
//   open_searchemp() {
//     this.searchEmp = true
//   }

//   close_searchemp() {
//     this.searchEmp = false
//   }

//   select_emp() {

//     let select = this.selectEmp.selectedEmployee.worker_code
//     if (select != "") {
//       this.doGetIndexWorker(select)
//       this.searchEmp = false
//     }

//   }

//   doGetIndexWorker(worker_code: string) {
//     for (let i = 0; i < this.worker_list.length; i++) {
//       if (this.worker_list[i].worker_code == worker_code) {
//         this.worker_index = i;
//         break;
//       }
//     }

//     this.doSetDetailWorker();

//   }

//   project_list: ProjectModel[] = [];
//   doLoadProject() {
//     this.projectService.project_get(this.initial_current.CompCode, "").then(async (res) => {
//       this.project_list = await res;
//     });
//   }
//   doGetProjectDetail(code: string): any {

//     if (code === "")
//       return "";

//     for (let i = 0; i < this.project_list.length; i++) {
//       if (this.project_list[i].project_code == code) {
//         if (this.initial_current.Language == "TH") {
//           return this.project_list[i].project_name_th;
//         }
//         else {
//           return this.project_list[i].project_name_en;
//         }
//       }
//     }
//   }

//   selectedDate_fillter: Date = new Date()
//   selectedToDate_fillter: Date = new Date()

//   projobmain_list: ProjobmainModel[] = [];
//   doLoadProjobmain() {
//     this.projectDetailService.projobmain_get("", "", "", this.selectedDate_fillter, this.selectedDate_fillter).then(async (res) => {
//       this.projobmain_list = await res;
//     });
//   }
//   doGetProjobDetail(code: string): any {

//     if (code === "")
//       return "";

//     for (let i = 0; i < this.projobmain_list.length; i++) {
//       if (this.projobmain_list[i].projobmain_code == code) {
//         if (this.initial_current.Language == "TH") {
//           return this.projobmain_list[i].projobmain_name_th;
//         }
//         else {
//           return this.projobmain_list[i].projobmain_name_en;
//         }
//       }
//     }
//   }




//   doLoadTimeot() {
//     this.trtimeot_list = [];
//     var tmp = new TRATTTimeotModel();
//     tmp.timeot_workdate = this.start_date;
//     tmp.timeot_todate = this.end_date;
//     tmp.worker_code = this.selectedAccount.worker_code;
//     this.timeotService.timeot_get(tmp).then(async (res) => {
//       res.forEach((elm: any) => {
//         elm.timeot_workdate = new Date(elm.timeot_workdate)
//       });
//       this.trtimeot_list = await res
//     });
//   }




//   currentStyles: Record<string, string> = {};

//   // setCurrentStyles() {
//   //   // CSS styles: set per current state of component properties
//   //   this.currentStyles = {
//   //     'font-style': this.canSave ? 'italic' : 'normal',
//   //     'font-weight': !this.isUnchanged ? 'bold' : 'normal',
//   //     'font-size': this.isSpecial ? '24px' : '12px',
//   //   };
//   // }

//   getClass(color: string, daytype: string) {
//     if (color == "1") return 'timecard_edit'
//     else if (daytype == "O") return 'daytype_O'
//     else if (daytype == "C") return 'daytype_C'
//     else if (daytype == "H") return 'daytype_H'
//     else if (daytype == "A") return 'daytype_A'
//     else if (daytype == "L") return 'daytype_L'
//     else return 'normal'

//   }

//   //เช็คชข้อมูลเมื่อมีการปิดงวด
//   hasTruePeriodCloseta: boolean = false;
//   async Periodclosed() {
//     try {
//       const res = await this.periodsService.period_get2(this.initial_current.CompCode, "PAY", this.initial_current.EmpType, this.initial_current.PR_Year, this.initial_current.TA_FromDate, this.initial_current.TA_ToDate);
//       if (res && res.length > 0) {
//         for (const element of res) {
//           element.period_from = new Date(element.period_from);
//           element.period_to = new Date(element.period_to);
//           element.period_payment = new Date(element.period_payment);
//         }
//         this.hasTruePeriodCloseta = res.some((item: { period_closeta: boolean }) => item.period_closeta === true);
//         if (this.hasTruePeriodCloseta) {
//           this.confirmationService.confirm({
//             message: this.initial_current.Language === 'TH' ? 'ข้อมูลที่ทำรายการอยู่ในงวดที่ปิดแล้ว' : 'Period is closed permission set to read-only !!!',
//             header: this.initial_current.Language === 'TH' ? 'คำเตือน' : 'Warning',
//             icon: 'pi pi-exclamation-triangle',
//             accept: () => {
//             },
//             rejectVisible: false,
//           });
//         }
//       }
//     } catch { }
//   }




// }

// interface DocRequest {
//   docno: string,
//   doctype: string,
//   fromdate: Date,
//   todate: Date,
//   detail: string
// }
